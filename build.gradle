plugins {
    id 'java'
}

group = project.findProperty("projectGroup")
version = project.findProperty("projectVersion")

repositories {
    mavenCentral()
}

dependencies {
    // LWJGL Core
    implementation "org.lwjgl:lwjgl:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-openal:${lwjglVersion}"

    // LWJGL Native dependencies for the determined platform
    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-${platform}"
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-${platform}"
    runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-${platform}"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-${platform}"
    runtimeOnly "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-${platform}"
    runtimeOnly "org.lwjgl:lwjgl-openal:${lwjglVersion}:natives-${platform}"

    // Math
    implementation "org.joml:joml:${jomlVersion}"

    // Networking
    implementation "io.netty:netty-all:${nettyVersion}"

    // Logger
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    annotationProcessor "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // Reflection
    implementation "org.reflections:reflections:${reflectionVersion}"

    //ImGui
    implementation "io.github.spair:imgui-java-binding:${imguiJavaVersion}" // ImGui for GUI
    implementation "io.github.spair:imgui-java-lwjgl3:${imguiJavaVersion}" // ImGui for GUI
    runtimeOnly "io.github.spair:imgui-java-natives-${imguiPlatform}:${imguiJavaVersion}"
}

tasks.register('generateVersionFile') {
    outputs.file("$buildDir/extra/version")
    doLast {
        file("$buildDir/extra/version").text = project.version.toString()
    }
}

jar {
    archiveFileName.set("${fileName}-${version}.jar")

    manifest {
        attributes 'Main-Class': 'com.chaotic_loom.core.Main'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Creation of extra files
    dependsOn generateVersionFile
    from("$buildDir/extra") {
        into 'extra'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('cleanExtra', Delete) {
    delete("$buildDir/extra")
}

tasks.register('cleanLibs', Delete) {
    delete("$buildDir/libs")
}

tasks.withType(Jar).configureEach {
    dependsOn(tasks.named('cleanLibs'))
    dependsOn(tasks.named('cleanExtra'))
}

tasks.register('buildWindows', GradleBuild) {
    tasks = ['jar']
    startParameter.projectProperties = [
            'platform': 'windows',
            'imguiPlatform': 'windows',
            'fileName': "${fileName}-windows"
    ]
}

tasks.register('runWindows') {
    dependsOn 'buildWindows'
    doLast {
        // Execute the built JAR
        javaexec {
            workingDir = file("$rootDir/run/")

            classpath = files("$buildDir/libs/${fileName}-windows-${version}.jar")
            mainClass = 'com.chaotic_loom.core.Main'
        }
    }
}