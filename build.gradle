import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = project.findProperty("projectGroup")
version = project.findProperty("projectVersion")

repositories {
    mavenCentral()
}

dependencies {
    // LWJGL Core
    implementation "org.lwjgl:lwjgl:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    implementation "org.lwjgl:lwjgl-openal:${lwjglVersion}"

    // LWJGL Native dependencies for the determined platform
    implementation "org.lwjgl:lwjgl:${lwjglVersion}:natives-${platform}"
    implementation "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-${platform}"
    implementation "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-${platform}"
    implementation "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-${platform}"
    implementation "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-${platform}"
    implementation "org.lwjgl:lwjgl-openal:${lwjglVersion}:natives-${platform}"

    // Math
    implementation "org.joml:joml:${jomlVersion}"

    // Networking
    implementation "io.netty:netty-all:${nettyVersion}"

    // Logger
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    annotationProcessor "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

tasks.named('shadowJar', ShadowJar) {
    archiveFileName.set('LinkoLauncher.jar')

    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'com.chaotic_loom.core.Main'
    }

    from {
        project.configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }

    configurations = [project.configurations.runtimeClasspath]
}

tasks.build {
    dependsOn tasks.shadowJar
}

tasks.named('build') {
    finalizedBy 'extractNatives'
}

tasks.register('extractNatives', Copy) {
    def nativesDir = file("$buildDir/natives")

    doFirst {
        delete nativesDir
    }

    into(nativesDir)
    from({
        configurations.runtimeClasspath
                .filter { it.name.contains("natives-${platform}") }
                .collect { zipTree(it) }
    }) {
        include '**/*.so'     // Linux shared objects
        include '**/*.dll'    // Windows dynamic libs
        include '**/*.dylib'  // macOS dynamic libs
    }
}
